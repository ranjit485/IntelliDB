import pandas as pd
from flask import jsonify, Flask, request
from pandas import DataFrame
from sqlalchemy import create_engine
from vanna.flask import VannaFlaskApp
from vanna.remote import VannaDefault
from flask_cors import CORS  # Import CORS

api_key = 'e20497935e1f41f1954c93b3a62d224d'

vanna_model_name = 'ranjits-ai'
vn = VannaDefault(model=vanna_model_name, api_key=api_key)

# Connection details
database = "canigo"
username = "root"
password = ""
host = "localhost"
port = '3306'

# Create a SQLAlchemy engine
engine = create_engine(f"mysql+pymysql://{username}:{password}@{host}:{port}/{database}")


# You define a function that takes in a SQL query as a string and returns a pandas dataframe
def run_sql(sql: str) -> pd.DataFrame:
    df = pd.read_sql_query(sql, engine)
    return df


# This gives the package a function that it can use to run the SQL
vn.run_sql = run_sql
vn.run_sql_is_set = True

df_information_schema = vn.run_sql("SELECT * FROM INFORMATION_SCHEMA.COLUMNS")

# This will break up the information schema into bite-sized chunks that can be referenced by the LLM
plan = vn.get_training_plan_generic(df_information_schema)
vn.train(plan=plan)

# print(plan)
vn.train(ddl="""
    CREATE TABLE IF NOT EXISTS students (
        StudentID INT PRIMARY KEY,
        RollNo INT NOT NULL,
        ProfilePhoto VARCHAR(500) NOT NULL,
        FirstName VARCHAR(255) DEFAULT NULL,
        LastName VARCHAR(255) DEFAULT NULL,
        course VARCHAR(250) NOT NULL,
        Department VARCHAR(255) DEFAULT NULL,
        Class VARCHAR(255) DEFAULT NULL,
        StudentContactNo VARCHAR(15) DEFAULT NULL,
        ParentContactNo VARCHAR(15) DEFAULT NULL,
        Username VARCHAR(50) DEFAULT NULL,
        Password VARCHAR(255) DEFAULT NULL
    );
""")

# Add documentation
vn.train(documentation="""
    The 'students' table stores information about students, including their ID, roll number, profile photo, first name, last name, course, department, class, student contact number, parent contact number, username, and password.
""")

vn.train(ddl="""
    CREATE TABLE IF NOT EXISTS admin (
        AdminID INT PRIMARY KEY,
        ProfilePhoto VARCHAR(500) NOT NULL,
        FirstName VARCHAR(255) DEFAULT NULL,
        LastName VARCHAR(255) DEFAULT NULL,
        course VARCHAR(250) NOT NULL,
        Username VARCHAR(50) DEFAULT NULL,
        Password VARCHAR(255) DEFAULT NULL
    );
""")
# Training for the 'leaves' table
vn.train(ddl="""
    CREATE TABLE IF NOT EXISTS leaves (
        LeaveID INT PRIMARY KEY,
        StudentID INT,
        DateTime DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
        TeacherID INT,
        HODID INT,
        LeaveType VARCHAR(255),
        StartDate DATETIME,
        EndDate DATETIME,
        ByGuard VARCHAR(50),
        Reason TEXT,
        TeacherApprovalStatus VARCHAR(50),
        HODApprovalStatus VARCHAR(50),
        Status VARCHAR(250) NOT NULL
    );
""")

# Add documentation for the 'leaves' table
vn.train(documentation="""
    The 'leaves' table stores information about student leaves, including leave ID, student ID, date and time, teacher ID, HOD ID, leave type, start date, end date, leave approval details, and status.
""")

vn.train(ddl="""
    CREATE TABLE IF NOT EXISTS guards (
        id INT PRIMARY KEY,
        ProfilePhoto MEDIUMTEXT NOT NULL,
        FirstName VARCHAR(250) NOT NULL,
        LastName VARCHAR(250) NOT NULL,
        Username VARCHAR(250) NOT NULL,
        Password VARCHAR(250) NOT NULL
    );
""")

# Add documentation
vn.train(documentation="""
    The 'admin' table stores information about administrative users, including their ID, profile photo, first name, last name, course, username, and password.
""")

vn.train(documentation="""
    The 'guards' table contains details about security guards, including their ID, profile photo, first name, last name, username, and password.
""")


training_data = vn.get_training_data()
# print(training_data)
train_df = vn.get_training_data()
# print(train_df)

app = Flask(__name__)
CORS(app)


@app.route('/api/ask', methods=['POST'])
def ask():
    try:
        # Get the user's question from the request
        user_query = request.json.get('question')

        # Use Vanna to get the response
        response = vn.ask(question=user_query, visualize=False)

        # Check if the response is a tuple
        if isinstance(response, tuple) and len(response) == 2 and isinstance(response[0], str) and isinstance(
                response[1], tuple):
            # Assuming the tuple contains a SQL query and a tuple with DataFrame and None
            sql_query = response[0]
            data_tuple = response[1]

            # Extract the DataFrame
            result_df = data_tuple[0] if isinstance(data_tuple[0], DataFrame) else None

            # Convert DataFrame to a list of dictionaries
            data_dict = result_df.to_dict(orient='records') if result_df is not None else None

            # Return the response as JSON
            response_json = {'result': sql_query, 'data': data_dict}
            return jsonify(response_json)

        else:
            # Handle other types if needed
            return jsonify({'result': str(response)})

    except Exception as e:
        return jsonify({'error': str(e)}), 500


if __name__ == "__main__":
    app.run(debug=True)

